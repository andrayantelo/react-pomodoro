{"version":3,"sources":["helpers/index.js","components/Break.js","actions/index.js","actions/types.js","components/Session.js","components/Controls.js","components/Display.js","components/App.js","reducers/index.js","reducers/timerReducer.js","index.js"],"names":["formatTime","milliseconds","num","seconds","Math","floor","minutes","connect","state","timer","updateBreak","type","payload","props","breakLength","handleClick","event","timerRunning","target","id","className","onClick","updateWork","workLength","Controls","startStop","startTimer","pauseTimer","console","log","stopTimer","runTimer","reset","resetTimer","tick","checkClock","interval","setInterval","playBeep","clearInterval","myAudio","current","play","React","createRef","this","src","ref","Component","beep","dispatch","getState","displayTime","switchSessions","App","Break","reducers","combineReducers","prevState","action","newSession","currentSession","newWorkLength","newBreakLength","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","startTime","applyMiddleware","thunk","next","group","info","result","groupEnd","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.ec0c18e5.chunk.js","sourcesContent":["const leadingZero = (num) => {\n    if (num < 10 && num >=0 ) {\n        return `0${num}`;\n    }\n    return `${num}`;\n}\n\nexport const formatTime = (milliseconds) => {\n    \n    let seconds = leadingZero(Math.floor((milliseconds/1000)%60));\n    let minutes = Math.floor(milliseconds/(1000*60)%60);\n    \n    let hours = (\"0\" + Math.floor((milliseconds / 3600000) % 60));\n    if (hours === 1) {\n        return `60:00`\n    }\n\n    return `${minutes}:${seconds}`;\n}","import React from 'react';\nimport { connect } from 'react-redux';\nimport { updateBreak } from '../actions';\nimport { formatTime } from '../helpers';\n\nconst Session = (props) => {\n    const { breakLength } = props.timer;\n\n    const handleClick = (event) => {\n        if (props.timerRunning) {\n            return;\n        }\n        props.updateBreak(event.target.id);\n    }\n\n    return (\n        <div className=\"session\">\n            <h4 id=\"break-label\" className=\"ui large header\">Break Length</h4>\n            <div className=\"session-display-container\">\n                <i\n                    id=\"break-increment\"\n                    className=\"session-item big arrow alternate circle up outline icon\"\n                    onClick={handleClick}\n                ></i>\n                <div \n                    id=\"break-length\"\n                    className=\"session-item session-display\">\n                    {formatTime(breakLength)}\n                </div>\n                <i\n                    id=\"break-decrement\"\n                    className=\"session-item big arrow alternate circle down outline icon\"\n                    onClick={handleClick}\n                ></i>\n            </div>\n        </div>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        timer: state.timer\n    }\n}\n\n\nexport default connect(\n    mapStateToProps,\n    { updateBreak }\n)(Session);","import {\n    TIMER_STARTED,\n    TIMER_PAUSED,\n    TIMER_RESET,\n    TICKED,\n    SESSION_ENDED,\n    BREAK_UPDATED,\n    WORK_UPDATED\n} from './types';\n\nexport const startTimer = () => {\n    return {\n        type: TIMER_STARTED\n    }\n}\n\nexport const tick = () => {\n    return {\n        type: TICKED\n    }\n}\n\nexport const checkClock = (beep) => {\n    return (dispatch, getState) => {\n        const state = getState();\n\n        if (state.timer.displayTime === 0) {\n            beep();\n        }\n        else if (state.timer.displayTime < 0) {\n            dispatch({type: SESSION_ENDED})\n        }\n    }\n}\n\n\nexport const pauseTimer = () => {\n    return {\n        type: TIMER_PAUSED\n    }\n}\n\nexport const resetTimer = () => {\n    return {\n        type: TIMER_RESET\n    }\n}\n\nexport const switchSessions = () => {\n    return {\n        type: SESSION_ENDED\n    }\n}\n\nexport const updateWork = (type) => {\n    return {\n        type: WORK_UPDATED,\n        payload: type\n    }\n}\n\nexport const updateBreak = (type) => {\n    return {\n        type: BREAK_UPDATED,\n        payload: type\n    }\n}","export const TIMER_STARTED = 'TIMER_STARTED';\nexport const TIMER_PAUSED = 'TIMER_PAUSED';\nexport const TIMER_RESET = 'TIMER_RESET';\nexport const TICKED = 'TICKED';\nexport const SESSION_ENDED = 'SESSION_ENDED';\nexport const BREAK_UPDATED = 'BREAK_UPDATED';\nexport const WORK_UPDATED = 'WORK_UPDATED';","import React from 'react';\nimport { connect } from 'react-redux';\nimport { updateWork } from '../actions';\nimport { formatTime } from '../helpers';\n\nconst Session = (props) => {\n    const { workLength } = props.timer;\n\n    const handleClick = (event) => {\n        if (props.timerRunning) {\n            return;\n        }\n        props.updateWork(event.target.id);\n    }\n\n    return (\n        <div className=\"session\">\n            <h4 id=\"work-label\" className=\"ui large header\">Work Length</h4>\n            <div className=\"session-display-container\">\n                <i\n                    id=\"work-increment\"\n                    className=\"session-item big arrow alternate circle up outline icon\"\n                    onClick={handleClick}\n                ></i>\n                <div \n                    id=\"work-length\"\n                    className=\"session-item session-display\">\n                    {formatTime(workLength)}\n                </div>\n                <i\n                    id=\"work-decrement\"\n                    className=\"session-item big arrow alternate circle down outline icon\"\n                    onClick={handleClick}\n                ></i>\n            </div>\n        </div>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        timer: state.timer\n    }\n}\n\nexport default connect(\n    mapStateToProps,\n    { updateWork }\n)(Session);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { startTimer, pauseTimer, resetTimer, tick, switchSessions, checkClock } from '../actions';\n\n\nclass Controls extends Component {\n    constructor(props) {\n        super(props);\n        this.myAudio = React.createRef();\n        this.interval = null;\n    }\n\n    startStop = () => {\n        const { timerRunning } = this.props.timer;\n        const { startTimer, pauseTimer} = this.props;\n        if (!timerRunning) {\n            console.log(\"start\");\n            startTimer();\n            this.runTimer();\n        }\n        else {\n            console.log(\"Pause\");\n            pauseTimer();\n            this.stopTimer();\n        }\n    }\n\n    reset = () => {\n        const { resetTimer } = this.props;\n        resetTimer();\n        this.stopTimer();\n    }\n\n    runTimer = () => {\n        const { tick, checkClock } = this.props;\n \n        this.interval = setInterval(() => {\n            tick();\n            checkClock(this.playBeep);\n        }, 1000)\n        \n\n    }\n\n    stopTimer = () => {\n        clearInterval(this.interval);\n    }\n\n    playBeep = () => {\n        if (this.myAudio !== null) {\n            this.myAudio.current.play()\n          }\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"controls\">\n                    <div\n                        id=\"start_stop\"\n                        onClick={this.startStop}\n                    >\n                        <i className=\"big play circle outline icon\"></i>\n                        <i className=\"big pause circle outline icon\"></i>\n                    </div>\n                    <div\n                        id=\"reset\"\n                        onClick={this.reset}\n                    >\n                       <i className=\"big redo icon\"></i>\n                    </div>\n                </div>\n                <div>\n                    <audio\n                        id=\"beep\"\n                        type=\"audio\"\n                        src=\"https://goo.gl/65cBl1\"\n                        ref={this.myAudio}\n                    />\n                </div>\n            </div>\n\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        timer: state.timer\n    }\n}\n\nexport default connect(\n    mapStateToProps,\n    { startTimer,\n      pauseTimer,\n      resetTimer,\n      tick,\n      checkClock,\n      switchSessions\n    }\n)(Controls);","import React from 'react';\nimport { connect } from 'react-redux';\nimport Controls from './Controls';\nimport { formatTime } from '../helpers';\n\nconst Display = (props) => {\n    const { displayTime } = props.timer;\n    return(\n        <div className=\"outer-display-container\">\n            <div className=\"display-container\">\n                <h3 id=\"timer-label\" className=\"ui header\">\n                    Session\n                </h3>\n                <div id=\"time-left\" className=\"display\">\n                    {formatTime(displayTime)}\n                </div>\n                <Controls />\n            </div>\n        </div>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        timer: state.timer\n    }\n}\n\nexport default connect(\n    mapStateToProps\n)(Display);","import React from 'react';\nimport Break from './Break';\nimport Work from './Session';\nimport Display from './Display';\n\nconst App = () => {\n   \n    return (\n        <div className=\"container\">\n            <div className=\"inner-container ui teal inverted segment\">\n                <div className=\"outer-row\">\n                    <h1 className=\"ui centered huge header\">Pomodoro</h1>\n                </div>\n                <div className=\"outer-row\">\n                    <Break />\n                    <Work />\n                </div>\n                <div className=\"outer-row\">\n                    <Display />\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default App;","import timerReducer from './timerReducer';\nimport { combineReducers } from 'redux';\n\n\nconst reducers = combineReducers({\n    timer: timerReducer\n})\n\nexport default reducers;","import {\n    TIMER_STARTED,\n    TIMER_PAUSED,\n    TIMER_RESET,\n    TICKED,\n    SESSION_ENDED,\n    WORK_UPDATED,\n    BREAK_UPDATED\n} from '../actions/types';\n\n/*const preloadedState = {\n    timer: {\n        breakLength: 2*1000,\n        workLength: 3*1000,\n        startTime: 0,\n        timerRunning: false,\n        displayTime: 3*1000,\n        currentSession: \"workLength\"\n    }\n}*/\n\n\nexport default (prevState={}, action) => {\n    switch(action.type) {\n        case TIMER_STARTED:\n            return {\n                ...prevState,\n                timerRunning: true\n            }\n        case TICKED:\n            return {\n                ...prevState,\n                displayTime: prevState.displayTime - (1000)\n                //displayTime: prevState.displayTime - (action.payload - prevState.startTime)\n            }\n        case TIMER_PAUSED:\n            return {\n                ...prevState,\n                timerRunning: false\n            }\n        case TIMER_RESET:\n            return {\n                ...prevState,\n                breakLength: 5*60*1000,\n                workLength: 25*60*1000,\n                displayTime: 25*60*1000,\n                timerRunning: false\n            }\n        case SESSION_ENDED:\n            let newSession = prevState.currentSession === \"workLength\"? \"breakLength\": \"workLength\";\n            return {\n                ...prevState,\n                currentSession: newSession,\n                displayTime: prevState[newSession] \n\n            }\n        case WORK_UPDATED:\n            if (action.payload === \"work-increment\") {\n                const newWorkLength = prevState.workLength + 60000;\n                if (newWorkLength > 3600000) {\n                    return prevState\n                }\n                return {\n                    ...prevState,\n                    workLength: newWorkLength,\n                    displayTime: newWorkLength\n                }\n            }\n            else {\n                const newWorkLength = prevState.workLength - 60000;\n                if (newWorkLength < 0) {\n                    return prevState\n                }\n                else {\n                    return {\n                        ...prevState,\n                        workLength: newWorkLength,\n                        displayTime: newWorkLength\n                    }\n                }\n            }\n        case BREAK_UPDATED:\n                if (action.payload === \"break-increment\") {\n                    const newBreakLength = prevState.breakLength + 60000;\n                    if (newBreakLength > 3600000) {\n                        return prevState\n                    }\n                    return {\n                        ...prevState,\n                        breakLength: newBreakLength\n                    }\n                }\n                else {\n                    const newBreakLength = prevState.breakLength - 60000;\n                    if (newBreakLength < 0) {\n                        return prevState\n                    }\n                    else {\n                        return {\n                            ...prevState,\n                            breakLength: newBreakLength\n                        }\n                    }\n                }\n        default:\n            return prevState;\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport App from './components/App';\nimport reducers from './reducers';\nimport './style.css';\n\nconst logger = (store) => (next) => (action) => {\n    console.group(action.type);\n    console.info('Dispatching', action);\n    let result = next(action);\n    console.log(\"Next state \", store.getState());\n    console.groupEnd();\n    return result;\n};\n\nconst preloadedState = {\n    timer: {\n        breakLength: 5*60*1000,\n        workLength: 25*60*1000,\n        startTime: 0,\n        timerRunning: false,\n        displayTime: 25*60*1000,\n        currentSession: \"workLength\"\n    }\n}\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n// second argument is initial state\nconst store = createStore(\n    reducers,\n    preloadedState,\n    composeEnhancers(applyMiddleware(thunk, logger)));\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.querySelector('#root')\n)"],"sourceRoot":""}